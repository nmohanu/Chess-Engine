#include <cstdint>
#include <iostream>
#include <vector>
#include <memory>
#include <algorithm>
#include <atomic>
#include <assert.h>
#include <bitset>
#include <chrono>

typedef uint64_t (*generator_function) (uint8_t, bool, uint64_t, uint64_t);

// Define a number for each piece. Also indexes for bitboards array.
#define W_KING              0
#define W_QUEEN             1
#define W_ROOK              2
#define W_BISHOP            3
#define W_KNIGHT            4
#define W_PAWN              5
#define B_KING              6
#define B_QUEEN             7
#define B_ROOK              8
#define B_BISHOP            9
#define B_KNIGHT            10
#define B_PAWN              11
#define TOTAL               12
#define COLOR_BOARD         13

// Other
#define EMPTY               14
#define INVALID             15

// Boards.
#define W_KING_BOARD        bit_boards[W_KING]
#define W_QUEEN_BOARD       bit_boards[W_QUEEN]
#define W_ROOK_BOARD        bit_boards[W_ROOK]
#define W_BISHOP_BOARD      bit_boards[W_BISHOP]
#define W_KNIGHT_BOARD      bit_boards[W_KNIGHT]
#define W_PAWN_BOARD        bit_boards[W_PAWN]
#define B_KING_BOARD        bit_boards[B_KING]
#define B_QUEEN_BOARD       bit_boards[B_QUEEN]
#define B_ROOK_BOARD        bit_boards[B_ROOK]
#define B_BISHOP_BOARD      bit_boards[B_BISHOP]
#define B_KNIGHT_BOARD      bit_boards[B_KNIGHT]
#define B_PAWN_BOARD        bit_boards[B_PAWN]
#define TOTAL_BOARD         bit_boards[TOTAL]
#define BLACK_PIECE_BOARD   bit_boards[COLOR_BOARD]

// We can use these in functions that have the current player boolean.
#define AUTO_KING           bit_boards[W_KING + 6 * is_black]
#define AUTO_QUEEN          bit_boards[W_QUEEN + 6 * is_black]
#define AUTO_ROOK           bit_boards[W_ROOK + 6 * is_black]
#define AUTO_BISHOP         bit_boards[W_BISHOP + 6 * is_black]
#define AUTO_KNIGHT         bit_boards[W_KNIGHT + 6 * is_black]
#define AUTO_PAWN           bit_boards[W_PAWN + 6 * is_black]

// Min and max eval score for alpha beta pruning.
#define MAX_EVAL    100.f
#define MIN_EVAL    -100.f

// Transposition table entry data flags.
#define hashfEXACT  0
#define hashfALPHA  1
#define hashfBETA   2

// Table size.
#define hash_table_size 0x2000000

#define EN_PASSANT_LEFT  0b10000000
#define EN_PASSANT_RIGHT 0b01000000

// No entry found.
#define no_hash_entry 999999999

// Default boards.
const uint64_t ROOK_SQUARES =    0b1000000100000000000000000000000000000000000000000000000010000001ULL;
const uint64_t KNIGHT_SQUARES =  0b0100001000000000000000000000000000000000000000000000000001000010ULL;
const uint64_t BISHOP_SQUARES =  0b0010010000000000000000000000000000000000000000000000000000100100ULL;
const uint64_t QUEEN_SQUARES =   0b0001000000000000000000000000000000000000000000000000000000010000ULL;
const uint64_t KING_SQUARES =    0b0000100000000000000000000000000000000000000000000000000000001000ULL;
const uint64_t PAWN_SQUARES =    0b0000000011111111000000000000000000000000000000001111111100000000ULL;
const uint64_t BLACK_PIECES =    0b1111111111111111000000000000000000000000000000000000000000000000ULL;
const uint64_t TOTAL_SQUARES =   0b1111111111111111000000000000000000000000000000001111111111111111ULL;

// Whether there is a search going on or not.
static std::atomic<bool> engine_is_searching(false);
static std::atomic<bool> move_found(false);

// Piece values.
const float ROOK_VALUE = 5.f;
const float QUEEN_VALUE = 9.f;
const float KNIGHT_VALUE = 3.f;
const float BISHOP_VALUE = 3.f;
const float PAWN_VALUE = 1.f;

const int PERFT_DEPTH = 8;

// Avoid collissions by only hashing and checking at nodes that are worth hashing.
const int MAX_HASH_DEPTH = 4;
const int MIN_HASH_DEPTH = 2;

// Square bonus for each piece.
const float PAWN_BONUS[64] = 
{
    0.0f,   0.0f,   0.0f,   0.0f,   0.0f,   0.0f,   0.0f,   0.0f,
    5.0f,   5.0f,   5.0f,   5.0f,   5.0f,   5.0f,   5.0f,   5.0f,
    1.0f,   1.0f,   2.0f,   3.0f,   3.0f,   2.0f,   1.0f,   1.0f,
    0.5f,   0.5f,   1.0f,   2.5f,   2.5f,   1.0f,   0.5f,   0.5f,
    0.0f,   0.0f,   0.0f,   2.0f,   2.0f,   0.0f,   0.0f,   0.0f,
    0.5f,   -0.5f,  -1.0f,  0.0f,   0.0f,   -1.0f,  -0.5f,  0.5f,
    0.5f,   1.0f,   1.0f,   -2.0f,  -2.0f,  1.0f,   1.0f,   0.5f,
    0.0f,   0.0f,   0.0f,   0.0f,   0.0f,   0.0f,   0.0f,   0.0f
};

const float KNIGHT_BONUS[64] = 
{
    -5.0f, -4.0f, -3.0f, -3.0f, -3.0f, -3.0f, -4.0f, -5.0f,
    -4.0f, -2.0f,  0.0f,  0.5f,  0.5f,  0.0f, -2.0f, -4.0f,
    -3.0f,  0.5f,  1.0f,  2.0f,  2.0f,  1.0f,  0.5f, -3.0f,
    -3.0f,  0.0f,  2.0f,  2.5f,  2.5f,  2.0f,  0.0f, -3.0f,
    -3.0f,  0.5f,  1.5f,  2.5f,  2.5f,  1.5f,  0.5f, -3.0f,
    -3.0f,  0.0f,  1.0f,  1.5f,  1.5f,  1.0f,  0.0f, -3.0f,
    -4.0f, -2.0f,  0.0f,  0.0f,  0.0f,  0.0f, -2.0f, -4.0f,
    -5.0f, -4.0f, -3.0f, -3.0f, -3.0f, -3.0f, -4.0f, -5.0f
};

const float BISHOP_BONUS[64] = 
{
    -2.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -2.0f,
    -1.0f,  0.0f,  0.0f,  0.5f,  0.5f,  0.0f,  0.0f, -1.0f,
    -1.0f,  0.5f,  0.5f,  1.0f,  1.0f,  0.5f,  0.5f, -1.0f,
    -1.0f,  0.0f,  1.0f,  1.0f,  1.0f,  1.0f,  0.0f, -1.0f,
    -1.0f,  0.5f,  1.0f,  1.0f,  1.0f,  1.0f,  0.5f, -1.0f,
    -1.0f,  1.0f,  1.0f,  1.0f,  1.0f,  1.0f,  1.0f, -1.0f,
    -1.0f,  0.5f,  0.0f,  0.0f,  0.0f,  0.0f,  0.5f, -1.0f,
    -2.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -2.0f
};

const float ROOK_BONUS[64] = 
{
     0.0f,  0.0f,  0.0f,  0.5f,  0.5f,  0.0f,  0.0f,  0.0f,
    -0.5f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f, -0.5f,
    -0.5f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f, -0.5f,
    -0.5f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f, -0.5f,
    -0.5f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f, -0.5f,
    -0.5f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f, -0.5f,
     0.5f,  1.0f,  1.0f,  1.0f,  1.0f,  1.0f,  1.0f,  0.5f,
     0.0f,  0.0f,  0.0f,  0.5f,  0.5f,  0.0f,  0.0f,  0.0f
};

const float QUEEN_BONUS[64] = 
{
    -2.0f, -1.0f, -1.0f, -0.5f, -0.5f, -1.0f, -1.0f, -2.0f,
    -1.0f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f,  0.0f, -1.0f,
    -1.0f,  0.0f,  0.5f,  0.5f,  0.5f,  0.5f,  0.0f, -1.0f,
    -0.5f,  0.0f,  0.5f,  0.5f,  0.5f,  0.5f,  0.0f, -0.5f,
     0.0f,  0.0f,  0.5f,  0.5f,  0.5f,  0.5f,  0.0f, -0.5f,
    -1.0f,  0.5f,  0.5f,  0.5f,  0.5f,  0.5f,  0.0f, -1.0f,
    -1.0f,  0.0f,  0.5f,  0.0f,  0.0f,  0.0f,  0.0f, -1.0f,
    -2.0f, -1.0f, -1.0f, -0.5f, -0.5f, -1.0f, -1.0f, -2.0f
};

const float KING_BONUS[64] = 
{
    -3.0f, -4.0f, -4.0f, -5.0f, -5.0f, -4.0f, -4.0f, -3.0f,
    -3.0f, -4.0f, -4.0f, -5.0f, -5.0f, -4.0f, -4.0f, -3.0f,
    -3.0f, -4.0f, -4.0f, -5.0f, -5.0f, -4.0f, -4.0f, -3.0f,
    -3.0f, -4.0f, -4.0f, -5.0f, -5.0f, -4.0f, -4.0f, -3.0f,
    -2.0f, -3.0f, -3.0f, -4.0f, -4.0f, -3.0f, -3.0f, -2.0f,
    -1.0f, -2.0f, -2.0f, -2.0f, -2.0f, -2.0f, -2.0f, -1.0f,
     2.0f,  2.0f,  0.0f,  0.0f,  0.0f,  0.0f,  2.0f,  2.0f,
     2.0f,  3.0f,  1.0f,  0.0f,  0.0f,  1.0f,  3.0f,  2.0f
};

const float KING_BONUS_ENDGAME[64] = 
{
    -5.0f, -4.0f, -3.0f, -2.0f, -2.0f, -3.0f, -4.0f, -5.0f,
    -3.0f, -2.0f, -1.0f,  0.0f,  0.0f, -1.0f, -2.0f, -3.0f,
    -3.0f, -1.0f,  2.0f,  3.0f,  3.0f,  2.0f, -1.0f, -3.0f,
    -3.0f, -1.0f,  3.0f,  4.0f,  4.0f,  3.0f, -1.0f, -3.0f,
    -3.0f, -1.0f,  3.0f,  4.0f,  4.0f,  3.0f, -1.0f, -3.0f,
    -3.0f, -1.0f,  2.0f,  3.0f,  3.0f,  2.0f, -1.0f, -3.0f,
    -3.0f, -3.0f,  0.0f,  0.0f,  0.0f,  0.0f, -3.0f, -3.0f,
    -5.0f, -3.0f, -3.0f, -3.0f, -3.0f, -3.0f, -3.0f, -5.0f
};

constexpr uint64_t KING_MOVE_SQUARES[] = 
{
    4665729213955833856ULL, 11592265440851656704ULL, 5796132720425828352ULL,
    2898066360212914176ULL, 1449033180106457088ULL, 724516590053228544ULL,
    362258295026614272ULL, 144959613005987840ULL, 13853283560024178688ULL,
    16186183351374184448ULL, 8093091675687092224ULL, 4046545837843546112ULL,
    2023272918921773056ULL, 1011636459460886528ULL, 505818229730443264ULL,
    216739030602088448ULL, 54114388906344448ULL, 63227278716305408ULL,
    31613639358152704ULL, 15806819679076352ULL, 7903409839538176ULL,
    3951704919769088ULL, 1975852459884544ULL, 846636838289408ULL,
    211384331665408ULL, 246981557485568ULL, 123490778742784ULL,
    61745389371392ULL, 30872694685696ULL, 15436347342848ULL,
    7718173671424ULL, 3307175149568ULL, 825720045568ULL,
    964771708928ULL, 482385854464ULL, 241192927232ULL,
    120596463616ULL, 60298231808ULL, 30149115904ULL,
    12918652928ULL, 3225468928ULL, 3768639488ULL,
    1884319744ULL, 942159872ULL, 471079936ULL,
    235539968ULL, 117769984ULL, 50463488ULL,
    12599488ULL, 14721248ULL, 7360624ULL,
    3680312ULL, 1840156ULL, 920078ULL,
    460039ULL, 197123ULL, 49216ULL,
    57504ULL, 28752ULL, 14376ULL,
    7188ULL, 3594ULL, 1797ULL,
    770ULL
};

constexpr uint64_t KNIGHT_MOVE_SQUARES[] = 
{
    9077567998918656ULL, 4679521487814656ULL, 38368557762871296ULL,
    19184278881435648ULL, 9592139440717824ULL, 4796069720358912ULL,
    2257297371824128ULL, 1128098930098176ULL, 2305878468463689728ULL,
    1152939783987658752ULL, 9799982666336960512ULL, 4899991333168480256ULL,
    2449995666584240128ULL, 1224997833292120064ULL, 576469569871282176ULL,
    288234782788157440ULL, 4620693356194824192ULL, 11533718717099671552ULL,
    5802888705324613632ULL, 2901444352662306816ULL, 1450722176331153408ULL,
    725361088165576704ULL, 362539804446949376ULL, 145241105196122112ULL,
    18049583422636032ULL, 45053588738670592ULL, 22667534005174272ULL,
    11333767002587136ULL, 5666883501293568ULL, 2833441750646784ULL,
    1416171111120896ULL, 567348067172352ULL, 70506185244672ULL,
    175990581010432ULL, 88545054707712ULL, 44272527353856ULL,
    22136263676928ULL, 11068131838464ULL, 5531918402816ULL,
    2216203387392ULL, 275414786112ULL, 687463207072ULL,
    345879119952ULL, 172939559976ULL, 86469779988ULL,
    43234889994ULL, 21609056261ULL, 8657044482ULL,
    1075839008ULL, 2685403152ULL, 1351090312ULL,
    675545156ULL, 337772578ULL, 168886289ULL,
    84410376ULL, 33816580ULL, 4202496ULL,
    10489856ULL, 5277696ULL, 2638848ULL,
    1319424ULL, 659712ULL, 329728ULL,
    132096ULL
};

// rook magic numbers
const uint64_t rook_magic_numbers[64] = 
{
    0x8a80104000800020ULL,
    0x140002000100040ULL,
    0x2801880a0017001ULL,
    0x100081001000420ULL,
    0x200020010080420ULL,
    0x3001c0002010008ULL,
    0x8480008002000100ULL,
    0x2080088004402900ULL,
    0x800098204000ULL,
    0x2024401000200040ULL,
    0x100802000801000ULL,
    0x120800800801000ULL,
    0x208808088000400ULL,
    0x2802200800400ULL,
    0x2200800100020080ULL,
    0x801000060821100ULL,
    0x80044006422000ULL,
    0x100808020004000ULL,
    0x12108a0010204200ULL,
    0x140848010000802ULL,
    0x481828014002800ULL,
    0x8094004002004100ULL,
    0x4010040010010802ULL,
    0x20008806104ULL,
    0x100400080208000ULL,
    0x2040002120081000ULL,
    0x21200680100081ULL,
    0x20100080080080ULL,
    0x2000a00200410ULL,
    0x20080800400ULL,
    0x80088400100102ULL,
    0x80004600042881ULL,
    0x4040008040800020ULL,
    0x440003000200801ULL,
    0x4200011004500ULL,
    0x188020010100100ULL,
    0x14800401802800ULL,
    0x2080040080800200ULL,
    0x124080204001001ULL,
    0x200046502000484ULL,
    0x480400080088020ULL,
    0x1000422010034000ULL,
    0x30200100110040ULL,
    0x100021010009ULL,
    0x2002080100110004ULL,
    0x202008004008002ULL,
    0x20020004010100ULL,
    0x2048440040820001ULL,
    0x101002200408200ULL,
    0x40802000401080ULL,
    0x4008142004410100ULL,
    0x2060820c0120200ULL,
    0x1001004080100ULL,
    0x20c020080040080ULL,
    0x2935610830022400ULL,
    0x44440041009200ULL,
    0x280001040802101ULL,
    0x2100190040002085ULL,
    0x80c0084100102001ULL,
    0x4024081001000421ULL,
    0x20030a0244872ULL,
    0x12001008414402ULL,
    0x2006104900a0804ULL,
    0x1004081002402ULL
};

// bishop magic numbers
const uint64_t bishop_magic_numbers[64] = 
{
    0x40040844404084ULL,
    0x2004208a004208ULL,
    0x10190041080202ULL,
    0x108060845042010ULL,
    0x581104180800210ULL,
    0x2112080446200010ULL,
    0x1080820820060210ULL,
    0x3c0808410220200ULL,
    0x4050404440404ULL,
    0x21001420088ULL,
    0x24d0080801082102ULL,
    0x1020a0a020400ULL,
    0x40308200402ULL,
    0x4011002100800ULL,
    0x401484104104005ULL,
    0x801010402020200ULL,
    0x400210c3880100ULL,
    0x404022024108200ULL,
    0x810018200204102ULL,
    0x4002801a02003ULL,
    0x85040820080400ULL,
    0x810102c808880400ULL,
    0xe900410884800ULL,
    0x8002020480840102ULL,
    0x220200865090201ULL,
    0x2010100a02021202ULL,
    0x152048408022401ULL,
    0x20080002081110ULL,
    0x4001001021004000ULL,
    0x800040400a011002ULL,
    0xe4004081011002ULL,
    0x1c004001012080ULL,
    0x8004200962a00220ULL,
    0x8422100208500202ULL,
    0x2000402200300c08ULL,
    0x8646020080080080ULL,
    0x80020a0200100808ULL,
    0x2010004880111000ULL,
    0x623000a080011400ULL,
    0x42008c0340209202ULL,
    0x209188240001000ULL,
    0x400408a884001800ULL,
    0x110400a6080400ULL,
    0x1840060a44020800ULL,
    0x90080104000041ULL,
    0x201011000808101ULL,
    0x1a2208080504f080ULL,
    0x8012020600211212ULL,
    0x500861011240000ULL,
    0x180806108200800ULL,
    0x4000020e01040044ULL,
    0x300000261044000aULL,
    0x802241102020002ULL,
    0x20906061210001ULL,
    0x5a84841004010310ULL,
    0x4010801011c04ULL,
    0xa010109502200ULL,
    0x4a02012000ULL,
    0x500201010098b028ULL,
    0x8040002811040900ULL,
    0x28000010020204ULL,
    0x6000020202d0240ULL,
    0x8918844842082200ULL,
    0x4010011029020020ULL
};